<!DOCTYPE html>
<html>
<head>
  <title>Mi Portafolio - Proyectos Docker</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .project-card {
      border: 1px solid #ddd;
      border-radius: 8px;
      padding: 20px;
      margin-bottom: 20px;
      transition: all 0.3s ease;
    }
    .project-card:hover {
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    .docker-badge {
      background-color: #2496ed;
      color: white;
      padding: 3px 8px;
      border-radius: 4px;
      font-size: 0.8em;
      margin-left: 10px;
    }
    .port-info {
      background-color: #f8f9fa;
      padding: 3px 8px;
      border-radius: 4px;
      font-size: 0.8em;
    }
    .action-buttons {
      margin-top: 15px;
    }
    .status-indicator {
      display: inline-block;
      width: 12px;
      height: 12px;
      border-radius: 50%;
      margin-right: 5px;
    }
    .status-running {
      background-color: #28a745;
    }
    .status-stopped {
      background-color: #dc3545;
    }
  </style>
</head>
<body>
  <div class="container py-5">
    <h1 class="mb-4">Mis Proyectos Docker</h1>
    
    <div class="row">
      <div class="col-md-8">
        <div class="alert alert-info">
          <strong>‚ÑπÔ∏è Informaci√≥n:</strong> Estos son tus proyectos con docker-compose.yml. 
          Puedes iniciarlos y se ejecutar√°n en el puerto configurado en su archivo docker-compose.
        </div>
      </div>
      <div class="col-md-4 text-end">
        <button id="refreshBtn" class="btn btn-outline-secondary">
          üîÑ Actualizar Lista
        </button>
      </div>
    </div>

    <div id="loading" class="text-center my-5">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Cargando...</span>
      </div>
      <p>Cargando proyectos...</p>
    </div>

    <div id="projects-container" class="row">
      <!-- Los proyectos se cargar√°n aqu√≠ din√°micamente -->
    </div>

    <div id="no-projects" class="text-center py-5" style="display: none;">
      <h4>No hay proyectos con docker-compose.yml disponibles</h4>
      <p>Agrega archivos docker-compose.yml a tus repositorios para verlos aqu√≠.</p>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      // Estado global para rastrear el proyecto en ejecuci√≥n
      let currentRunningProject = null;
      
      // Cargar proyectos al iniciar
      document.addEventListener('DOMContentLoaded', loadProjects);

      // Funci√≥n para cargar los proyectos
      async function loadProjects() {
        try {
          document.getElementById('loading').style.display = 'block';
          document.getElementById('projects-container').innerHTML = '';
          document.getElementById('no-projects').style.display = 'none';

          const response = await fetch('/api/github/executables');
          const projects = await response.json();

          document.getElementById('loading').style.display = 'none';

          if (projects.length === 0) {
            document.getElementById('no-projects').style.display = 'block';
            return;
          }

          const container = document.getElementById('projects-container');
          
          projects.forEach(project => {
            const projectCard = document.createElement('div');
            projectCard.className = 'col-md-6 mb-4';
            projectCard.innerHTML = `
              <div class="project-card">
                <h3>
                  ${project.name}
                  <span class="docker-badge">Docker</span>
                </h3>
                <p class="text-muted">Puerto: <span class="port-info">${project.port || 'No especificado'}</span></p>
                
                <div class="action-buttons">
                  <button 
                    onclick="runProject('${project.name}')" 
                    class="btn btn-primary btn-sm"
                    id="btn-${project.name}"
                  >
                    <span class="status-indicator status-stopped"></span>
                    üöÄ Iniciar Proyecto
                  </button>
                  <a 
                    href="/repos/${project.name}" 
                    target="_blank" 
                    class="btn btn-outline-secondary btn-sm ms-2"
                  >
                    üìÇ Ver Archivos
                  </a>
                </div>
              </div>
            `;
            container.appendChild(projectCard);
          });

          // Verificar si hay alg√∫n proyecto en ejecuci√≥n
          checkRunningProject();
        } catch (error) {
          console.error('Error al cargar proyectos:', error);
          document.getElementById('loading').style.display = 'none';
          alert('Error al cargar los proyectos. Por favor, intenta nuevamente.');
        }
      }

      // Funci√≥n para iniciar un proyecto
      async function runProject(projectName) {
        try {
          const button = document.getElementById(`btn-${projectName}`);
          button.disabled = true;
          button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Iniciando...';

          // Detener el proyecto actual si hay uno en ejecuci√≥n
          if (currentRunningProject && currentRunningProject !== projectName) {
            await stopProject(currentRunningProject);
          }

          const response = await fetch(`/api/github/run/${projectName}`, {
            method: 'POST'
          });
          const data = await response.json();

          if (response.ok) {
            currentRunningProject = projectName;
            updateProjectButton(projectName, true);
            alert(`‚úÖ ${data.message}\nAccede en: ${data.url}`);
          } else {
            throw new Error(data.message || 'Error al iniciar el proyecto');
          }
        } catch (error) {
          console.error('Error al iniciar proyecto:', error);
          alert(`‚ùå ${error.message}`);
        } finally {
          const button = document.getElementById(`btn-${projectName}`);
          if (button) {
            button.disabled = false;
          }
        }
      }

      // Funci√≥n para detener un proyecto
      async function stopProject(projectName) {
        try {
          const button = document.getElementById(`btn-${projectName}`);
          if (button) {
            button.disabled = true;
            button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Deteniendo...';
          }

          const response = await fetch('/api/github/stop', {
            method: 'POST'
          });

          if (response.ok) {
            updateProjectButton(projectName, false);
            if (currentRunningProject === projectName) {
              currentRunningProject = null;
            }
            return true;
          } else {
            throw new Error('Error al detener el proyecto');
          }
        } catch (error) {
          console.error('Error al detener proyecto:', error);
          alert(`‚ùå ${error.message}`);
          return false;
        } finally {
          const button = document.getElementById(`btn-${projectName}`);
          if (button) {
            button.disabled = false;
            button.innerHTML = '<span class="status-indicator status-stopped"></span> üöÄ Iniciar Proyecto';
          }
        }
      }

      // Funci√≥n para actualizar el estado del bot√≥n
      function updateProjectButton(projectName, isRunning) {
        const button = document.getElementById(`btn-${projectName}`);
        if (button) {
          const indicator = button.querySelector('.status-indicator');
          if (isRunning) {
            indicator.classList.remove('status-stopped');
            indicator.classList.add('status-running');
            button.innerHTML = '<span class="status-indicator status-running"></span> üõë Detener Proyecto';
            button.onclick = () => stopProject(projectName);
            button.classList.remove('btn-primary');
            button.classList.add('btn-danger');
          } else {
            indicator.classList.remove('status-running');
            indicator.classList.add('status-stopped');
            button.innerHTML = '<span class="status-indicator status-stopped"></span> üöÄ Iniciar Proyecto';
            button.onclick = () => runProject(projectName);
            button.classList.remove('btn-danger');
            button.classList.add('btn-primary');
          }
        }
      }

      // Funci√≥n para verificar si hay un proyecto en ejecuci√≥n
      async function checkRunningProject() {
        try {
          const response = await fetch('/api/github/status');
          if (response.ok) {
            const data = await response.json();
            if (data.runningProject) {
              currentRunningProject = data.runningProject;
              updateProjectButton(data.runningProject, true);
            }
          }
        } catch (error) {
          console.error('Error al verificar estado:', error);
        }
      }

      // Bot√≥n de actualizaci√≥n
      document.getElementById('refreshBtn').addEventListener('click', loadProjects);
    </script>
  </div>
</body>
</html>